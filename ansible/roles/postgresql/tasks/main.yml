- name: install postgresql-client
  apt:
    name: ["postgresql-client"]
    state: present
  become: yes

- name: create postgresql dir
  file:
    path: "{{ db_dir }}"
    state: directory

- name: create postgresql dir
  file:
    path: "{{ db_dir }}/config"
    state: directory

- name: create postgresql data dir
  file:
    path: "{{ db_data_dir }}"
    state: directory
    mode: 0777

- name: set peer ip
  set_fact:
    peer_ip: "{{groups['harbor'][1]}}"
  when: ansible_default_ipv4.address == groups['harbor'][0]

- name: set peer ip
  set_fact:
    peer_ip: "{{groups['harbor'][0]}}"
  when: ansible_default_ipv4.address == groups['harbor'][1]

- name: become_standby.sh
  template:
    src: "become_standby.sh.j2"
    dest: "{{ db_dir }}/become_standby.sh"
    mode: 0777
  register: db_env

- name: replace postgresql env file
  template:
    src: "postgresql/env.j2"
    dest: "{{ db_dir }}/config/env"
  register: db_env

- lineinfile:
    path: "{{ db_dir }}/config/env"
    regexp: "^REPLICATE_FROM="
    line: "REPLICATE_FROM={{db_master_ip}}"
  when: ansible_default_ipv4.address != db_master_ip


- name: copy docker-compose file for postgresql
  template:
    src: docker-compose.yml.j2
    dest: "{{ db_dir }}/docker-compose.yml"
  register: compose_file

- name: copy setup-replication.sh file for postgresql
  copy:
    src: setup-replication.sh
    dest: "{{ db_dir }}/config/setup-replication.sh"
    mode: 0777
  register: compose_file

- name: pip install docker-py
  pip:
    name: docker-py

- name: pull an image
  docker_image:
    name: "{{ postgresql_image }}"

- name: check postgresql is running or not
  shell: "docker ps -q --no-trunc | grep $(docker-compose ps -q postgresql)"
  args:
    chdir: "{{db_dir}}"
  ignore_errors: yes
  register: check_container

- name: start postgresql container
  shell: "docker-compose -f {{ db_dir }}/docker-compose.yml up -d"
  when: check_container.rc != 0

- name: launch container
  shell: "docker-compose -f {{ db_dir }}/docker-compose.yml restart"
  when:
   - db_env.changed
   - check_container.rc == 0

- debug:
    msg: "{{groups['harbor'][0]}}"

# For Clair
- name: Init Clair DB | check database exist or not
  shell: "docker exec -t harbor-db psql -U postgres -c \"SELECT 1 FROM pg_database WHERE datname = 'clair'\" | grep -q 1 "
  register: clair_db
  until: clair_db.rc == 0
  retries: 3
  delay: 5
  ignore_errors: yes
  when: db_master_ip == ansible_default_ipv4.address

- name: Init Clair DB | debug clair_db
  debug:
    msg: "{{clair_db}}"
  when: db_master_ip == ansible_default_ipv4.address and clair_db.failed

- name: Init Clair DB | create database
  shell: "docker exec -t harbor-db psql -U postgres -c \"create database clair;\""
  register: create_clair_db
  when: db_master_ip == ansible_default_ipv4.address and clair_db.failed

- name: Init Clair DB | create user
  shell: "docker exec -t harbor-db psql -U postgres -c \"create user {{ clair_db_user }} with encrypted password '{{ clair_db_password }}';\""
  register: create_clair_user
  when: db_master_ip == ansible_default_ipv4.address and create_clair_db.changed

- name: Init Clair DB | create user
  shell: "docker exec -t harbor-db psql -U postgres -c \"grant all privileges on database clair to {{ clair_db_user }};\""
  when: db_master_ip == ansible_default_ipv4.address and create_clair_user.changed



# For Notary
- name: Init Notary DB | check database exist or not
  shell: "docker exec -t harbor-db psql -U postgres -c \"SELECT 1 FROM pg_database WHERE datname = 'notarysigner'\" | grep -q 1 "
  register: notary_db
  until: notary_db.rc == 0
  retries: 3
  delay: 5
  ignore_errors: yes
  when: db_master_ip == ansible_default_ipv4.address

- name: Init Notary DB | debug notary_db
  debug:
    msg: "{{notary_db}}"
  when: db_master_ip == ansible_default_ipv4.address and notary_db.failed

- name: Init Notary DB | create database
  shell: "docker exec -t harbor-db psql -U postgres -c \"create database notarysigner;\""
  register: create_notary_db
  when: db_master_ip == ansible_default_ipv4.address and notary_db.failed

- name: Init Notary DB | create user
  shell: "docker exec -t harbor-db psql -U postgres -c \"create user {{ notary_signer_db_user }} with encrypted password '{{ notary_signer_db_password }}';\""
  register: create_notary_user
  when: db_master_ip == ansible_default_ipv4.address and create_notary_db.changed

- name: Init Notary DB | create user
  shell: "docker exec -t harbor-db psql -U postgres -c \"grant all privileges on database notarysigner to {{ notary_signer_db_user }};\""
  when: db_master_ip == ansible_default_ipv4.address and create_notary_user.changed
